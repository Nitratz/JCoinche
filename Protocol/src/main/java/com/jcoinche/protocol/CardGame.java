// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cards.proto

package com.jcoinche.protocol;

public final class CardGame {
  private CardGame() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CardClientOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.jcoinche.protocol.CardClient)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 Value = 1;</code>
     */
    int getValue();

    /**
     * <code>optional string Name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string Name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
     */
    int getTypeValue();
    /**
     * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
     */
    com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE getType();
  }
  /**
   * Protobuf type {@code com.jcoinche.protocol.CardClient}
   */
  public  static final class CardClient extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.jcoinche.protocol.CardClient)
      CardClientOrBuilder {
    // Use CardClient.newBuilder() to construct.
    private CardClient(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CardClient() {
      value_ = 0;
      name_ = "";
      type_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private CardClient(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              value_ = input.readUInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardClient_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardClient_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.jcoinche.protocol.CardGame.CardClient.class, com.jcoinche.protocol.CardGame.CardClient.Builder.class);
    }

    /**
     * Protobuf enum {@code com.jcoinche.protocol.CardClient.CLIENT_TYPE}
     */
    public enum CLIENT_TYPE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CONNEXION = 0;</code>
       */
      CONNEXION(0),
      /**
       * <code>ROOM = 1;</code>
       */
      ROOM(1),
      /**
       * <code>CALL = 2;</code>
       */
      CALL(2),
      /**
       * <code>DRAW = 3;</code>
       */
      DRAW(3),
      /**
       * <code>CARDS = 4;</code>
       */
      CARDS(4),
      /**
       * <code>LIAR = 5;</code>
       */
      LIAR(5),
      /**
       * <code>START = 6;</code>
       */
      START(6),
      /**
       * <code>DISCONNECT = 7;</code>
       */
      DISCONNECT(7),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>CONNEXION = 0;</code>
       */
      public static final int CONNEXION_VALUE = 0;
      /**
       * <code>ROOM = 1;</code>
       */
      public static final int ROOM_VALUE = 1;
      /**
       * <code>CALL = 2;</code>
       */
      public static final int CALL_VALUE = 2;
      /**
       * <code>DRAW = 3;</code>
       */
      public static final int DRAW_VALUE = 3;
      /**
       * <code>CARDS = 4;</code>
       */
      public static final int CARDS_VALUE = 4;
      /**
       * <code>LIAR = 5;</code>
       */
      public static final int LIAR_VALUE = 5;
      /**
       * <code>START = 6;</code>
       */
      public static final int START_VALUE = 6;
      /**
       * <code>DISCONNECT = 7;</code>
       */
      public static final int DISCONNECT_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CLIENT_TYPE valueOf(int value) {
        return forNumber(value);
      }

      public static CLIENT_TYPE forNumber(int value) {
        switch (value) {
          case 0: return CONNEXION;
          case 1: return ROOM;
          case 2: return CALL;
          case 3: return DRAW;
          case 4: return CARDS;
          case 5: return LIAR;
          case 6: return START;
          case 7: return DISCONNECT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CLIENT_TYPE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CLIENT_TYPE> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CLIENT_TYPE>() {
              public CLIENT_TYPE findValueByNumber(int number) {
                return CLIENT_TYPE.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.jcoinche.protocol.CardGame.CardClient.getDescriptor().getEnumTypes().get(0);
      }

      private static final CLIENT_TYPE[] VALUES = values();

      public static CLIENT_TYPE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private CLIENT_TYPE(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.jcoinche.protocol.CardClient.CLIENT_TYPE)
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private int value_;
    /**
     * <code>optional uint32 Value = 1;</code>
     */
    public int getValue() {
      return value_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string Name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>optional string Name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
     */
    public com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE getType() {
      com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE result = com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE.valueOf(type_);
      return result == null ? com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (value_ != 0) {
        output.writeUInt32(1, value_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (type_ != com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE.CONNEXION.getNumber()) {
        output.writeEnum(3, type_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (value_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, value_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (type_ != com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE.CONNEXION.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.jcoinche.protocol.CardGame.CardClient)) {
        return super.equals(obj);
      }
      com.jcoinche.protocol.CardGame.CardClient other = (com.jcoinche.protocol.CardGame.CardClient) obj;

      boolean result = true;
      result = result && (getValue()
          == other.getValue());
      result = result && getName()
          .equals(other.getName());
      result = result && type_ == other.type_;
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.jcoinche.protocol.CardGame.CardClient parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.jcoinche.protocol.CardGame.CardClient prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.jcoinche.protocol.CardClient}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.jcoinche.protocol.CardClient)
        com.jcoinche.protocol.CardGame.CardClientOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardClient_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardClient_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.jcoinche.protocol.CardGame.CardClient.class, com.jcoinche.protocol.CardGame.CardClient.Builder.class);
      }

      // Construct using com.jcoinche.protocol.CardGame.CardClient.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        value_ = 0;

        name_ = "";

        type_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardClient_descriptor;
      }

      public com.jcoinche.protocol.CardGame.CardClient getDefaultInstanceForType() {
        return com.jcoinche.protocol.CardGame.CardClient.getDefaultInstance();
      }

      public com.jcoinche.protocol.CardGame.CardClient build() {
        com.jcoinche.protocol.CardGame.CardClient result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.jcoinche.protocol.CardGame.CardClient buildPartial() {
        com.jcoinche.protocol.CardGame.CardClient result = new com.jcoinche.protocol.CardGame.CardClient(this);
        result.value_ = value_;
        result.name_ = name_;
        result.type_ = type_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.jcoinche.protocol.CardGame.CardClient) {
          return mergeFrom((com.jcoinche.protocol.CardGame.CardClient)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.jcoinche.protocol.CardGame.CardClient other) {
        if (other == com.jcoinche.protocol.CardGame.CardClient.getDefaultInstance()) return this;
        if (other.getValue() != 0) {
          setValue(other.getValue());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.jcoinche.protocol.CardGame.CardClient parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.jcoinche.protocol.CardGame.CardClient) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int value_ ;
      /**
       * <code>optional uint32 Value = 1;</code>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional uint32 Value = 1;</code>
       */
      public Builder setValue(int value) {
        
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 Value = 1;</code>
       */
      public Builder clearValue() {
        
        value_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string Name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
       */
      public com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE getType() {
        com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE result = com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE.valueOf(type_);
        return result == null ? com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
       */
      public Builder setType(com.jcoinche.protocol.CardGame.CardClient.CLIENT_TYPE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardClient.CLIENT_TYPE Type = 3;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:com.jcoinche.protocol.CardClient)
    }

    // @@protoc_insertion_point(class_scope:com.jcoinche.protocol.CardClient)
    private static final com.jcoinche.protocol.CardGame.CardClient DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.jcoinche.protocol.CardGame.CardClient();
    }

    public static com.jcoinche.protocol.CardGame.CardClient getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CardClient>
        PARSER = new com.google.protobuf.AbstractParser<CardClient>() {
      public CardClient parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new CardClient(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CardClient> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CardClient> getParserForType() {
      return PARSER;
    }

    public com.jcoinche.protocol.CardGame.CardClient getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CardServerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.jcoinche.protocol.CardServer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 Value = 1;</code>
     */
    int getValue();

    /**
     * <code>optional string Name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string Name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
     */
    int getTypeValue();
    /**
     * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
     */
    com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE getType();
  }
  /**
   * Protobuf type {@code com.jcoinche.protocol.CardServer}
   */
  public  static final class CardServer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.jcoinche.protocol.CardServer)
      CardServerOrBuilder {
    // Use CardServer.newBuilder() to construct.
    private CardServer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CardServer() {
      value_ = 0;
      name_ = "";
      type_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private CardServer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              value_ = input.readUInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardServer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardServer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.jcoinche.protocol.CardGame.CardServer.class, com.jcoinche.protocol.CardGame.CardServer.Builder.class);
    }

    /**
     * Protobuf enum {@code com.jcoinche.protocol.CardServer.SERVER_TYPE}
     */
    public enum SERVER_TYPE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>WELCOME = 0;</code>
       */
      WELCOME(0),
      /**
       * <code>CARDS = 1;</code>
       */
      CARDS(1),
      /**
       * <code>TURN = 2;</code>
       */
      TURN(2),
      /**
       * <code>DRAW = 3;</code>
       */
      DRAW(3),
      /**
       * <code>CALL = 4;</code>
       */
      CALL(4),
      /**
       * <code>ROOM = 5;</code>
       */
      ROOM(5),
      /**
       * <code>LIAR = 6;</code>
       */
      LIAR(6),
      /**
       * <code>STARTED = 7;</code>
       */
      STARTED(7),
      /**
       * <code>DISCONNECT = 8;</code>
       */
      DISCONNECT(8),
      /**
       * <code>FAILED = 9;</code>
       */
      FAILED(9),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>WELCOME = 0;</code>
       */
      public static final int WELCOME_VALUE = 0;
      /**
       * <code>CARDS = 1;</code>
       */
      public static final int CARDS_VALUE = 1;
      /**
       * <code>TURN = 2;</code>
       */
      public static final int TURN_VALUE = 2;
      /**
       * <code>DRAW = 3;</code>
       */
      public static final int DRAW_VALUE = 3;
      /**
       * <code>CALL = 4;</code>
       */
      public static final int CALL_VALUE = 4;
      /**
       * <code>ROOM = 5;</code>
       */
      public static final int ROOM_VALUE = 5;
      /**
       * <code>LIAR = 6;</code>
       */
      public static final int LIAR_VALUE = 6;
      /**
       * <code>STARTED = 7;</code>
       */
      public static final int STARTED_VALUE = 7;
      /**
       * <code>DISCONNECT = 8;</code>
       */
      public static final int DISCONNECT_VALUE = 8;
      /**
       * <code>FAILED = 9;</code>
       */
      public static final int FAILED_VALUE = 9;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SERVER_TYPE valueOf(int value) {
        return forNumber(value);
      }

      public static SERVER_TYPE forNumber(int value) {
        switch (value) {
          case 0: return WELCOME;
          case 1: return CARDS;
          case 2: return TURN;
          case 3: return DRAW;
          case 4: return CALL;
          case 5: return ROOM;
          case 6: return LIAR;
          case 7: return STARTED;
          case 8: return DISCONNECT;
          case 9: return FAILED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SERVER_TYPE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SERVER_TYPE> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SERVER_TYPE>() {
              public SERVER_TYPE findValueByNumber(int number) {
                return SERVER_TYPE.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.jcoinche.protocol.CardGame.CardServer.getDescriptor().getEnumTypes().get(0);
      }

      private static final SERVER_TYPE[] VALUES = values();

      public static SERVER_TYPE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SERVER_TYPE(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.jcoinche.protocol.CardServer.SERVER_TYPE)
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private int value_;
    /**
     * <code>optional uint32 Value = 1;</code>
     */
    public int getValue() {
      return value_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string Name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <code>optional string Name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
     */
    public com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE getType() {
      com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE result = com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE.valueOf(type_);
      return result == null ? com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (value_ != 0) {
        output.writeUInt32(1, value_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (type_ != com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE.WELCOME.getNumber()) {
        output.writeEnum(3, type_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (value_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, value_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (type_ != com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE.WELCOME.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.jcoinche.protocol.CardGame.CardServer)) {
        return super.equals(obj);
      }
      com.jcoinche.protocol.CardGame.CardServer other = (com.jcoinche.protocol.CardGame.CardServer) obj;

      boolean result = true;
      result = result && (getValue()
          == other.getValue());
      result = result && getName()
          .equals(other.getName());
      result = result && type_ == other.type_;
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.jcoinche.protocol.CardGame.CardServer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.jcoinche.protocol.CardGame.CardServer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.jcoinche.protocol.CardServer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.jcoinche.protocol.CardServer)
        com.jcoinche.protocol.CardGame.CardServerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardServer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardServer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.jcoinche.protocol.CardGame.CardServer.class, com.jcoinche.protocol.CardGame.CardServer.Builder.class);
      }

      // Construct using com.jcoinche.protocol.CardGame.CardServer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        value_ = 0;

        name_ = "";

        type_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.jcoinche.protocol.CardGame.internal_static_com_jcoinche_protocol_CardServer_descriptor;
      }

      public com.jcoinche.protocol.CardGame.CardServer getDefaultInstanceForType() {
        return com.jcoinche.protocol.CardGame.CardServer.getDefaultInstance();
      }

      public com.jcoinche.protocol.CardGame.CardServer build() {
        com.jcoinche.protocol.CardGame.CardServer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.jcoinche.protocol.CardGame.CardServer buildPartial() {
        com.jcoinche.protocol.CardGame.CardServer result = new com.jcoinche.protocol.CardGame.CardServer(this);
        result.value_ = value_;
        result.name_ = name_;
        result.type_ = type_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.jcoinche.protocol.CardGame.CardServer) {
          return mergeFrom((com.jcoinche.protocol.CardGame.CardServer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.jcoinche.protocol.CardGame.CardServer other) {
        if (other == com.jcoinche.protocol.CardGame.CardServer.getDefaultInstance()) return this;
        if (other.getValue() != 0) {
          setValue(other.getValue());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.jcoinche.protocol.CardGame.CardServer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.jcoinche.protocol.CardGame.CardServer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int value_ ;
      /**
       * <code>optional uint32 Value = 1;</code>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional uint32 Value = 1;</code>
       */
      public Builder setValue(int value) {
        
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 Value = 1;</code>
       */
      public Builder clearValue() {
        
        value_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string Name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string Name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
       */
      public com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE getType() {
        com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE result = com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE.valueOf(type_);
        return result == null ? com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
       */
      public Builder setType(com.jcoinche.protocol.CardGame.CardServer.SERVER_TYPE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .com.jcoinche.protocol.CardServer.SERVER_TYPE Type = 3;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:com.jcoinche.protocol.CardServer)
    }

    // @@protoc_insertion_point(class_scope:com.jcoinche.protocol.CardServer)
    private static final com.jcoinche.protocol.CardGame.CardServer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.jcoinche.protocol.CardGame.CardServer();
    }

    public static com.jcoinche.protocol.CardGame.CardServer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CardServer>
        PARSER = new com.google.protobuf.AbstractParser<CardServer>() {
      public CardServer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new CardServer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CardServer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CardServer> getParserForType() {
      return PARSER;
    }

    public com.jcoinche.protocol.CardGame.CardServer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_jcoinche_protocol_CardClient_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_jcoinche_protocol_CardClient_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_jcoinche_protocol_CardServer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_jcoinche_protocol_CardServer_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Cards.proto\022\025com.jcoinche.protocol\"\322\001\n" +
      "\nCardClient\022\r\n\005Value\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t" +
      "\022;\n\004Type\030\003 \001(\0162-.com.jcoinche.protocol.C" +
      "ardClient.CLIENT_TYPE\"j\n\013CLIENT_TYPE\022\r\n\t" +
      "CONNEXION\020\000\022\010\n\004ROOM\020\001\022\010\n\004CALL\020\002\022\010\n\004DRAW\020" +
      "\003\022\t\n\005CARDS\020\004\022\010\n\004LIAR\020\005\022\t\n\005START\020\006\022\016\n\nDIS" +
      "CONNECT\020\007\"\351\001\n\nCardServer\022\r\n\005Value\030\001 \001(\r\022" +
      "\014\n\004Name\030\002 \001(\t\022;\n\004Type\030\003 \001(\0162-.com.jcoinc" +
      "he.protocol.CardServer.SERVER_TYPE\"\200\001\n\013S" +
      "ERVER_TYPE\022\013\n\007WELCOME\020\000\022\t\n\005CARDS\020\001\022\010\n\004TU",
      "RN\020\002\022\010\n\004DRAW\020\003\022\010\n\004CALL\020\004\022\010\n\004ROOM\020\005\022\010\n\004LI" +
      "AR\020\006\022\013\n\007STARTED\020\007\022\016\n\nDISCONNECT\020\010\022\n\n\006FAI" +
      "LED\020\tB\nB\010CardGameb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_jcoinche_protocol_CardClient_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_jcoinche_protocol_CardClient_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_jcoinche_protocol_CardClient_descriptor,
        new java.lang.String[] { "Value", "Name", "Type", });
    internal_static_com_jcoinche_protocol_CardServer_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_jcoinche_protocol_CardServer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_jcoinche_protocol_CardServer_descriptor,
        new java.lang.String[] { "Value", "Name", "Type", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
